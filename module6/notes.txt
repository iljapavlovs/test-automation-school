* Best Practices - driver should be put under resources together with src
*         //NOTE - you have to indicate all class names that are specified on the current element
          // This is contrary to CSS Selector where you can specify just one of the class names

* understand that it is not necessary to write
  WebElement elementById = driver.findElement(By.id("search_query_top"));
  elementById.click();
and you can just chain:
driver.findElement(By.name("q")).click();

* understand that it is possible to assign object reference to a variable which it the interface, whichis implemented by the object`s class
or assign to parent class, which is extended by the object`s class
or assign to abstract parent class, which is extended by the object`s class
* understand usage of local var vs field and where they should be used in Junit Test(After -> test)
* return type of a method



* Closing browsers - in AfterMethod or in AfetrClass. also discuss in parallel execution - not possible run parallel if AfterClass is used.

Selenium Grid:
    * each new webdriver initialization creates a new session, whcih in turn
    * show example how to use SwissRe Selenium grid
        * Videos, desiredcapabilities
        * UnreachableBrowserExc SessionNotCreated





*
So if you find yourself with a test suite that hard to maintain,  slow, frequently broken - stop. Think about what are you doing,. Why you are doing this. Could we replicate this level of confidence with smaller tests

only e2e. not all tests need to be Selenium!


"Implicit waits are terrible mistake I have made and I apologize for them!"

Avoid using implicit wait if you possible can, especcialy with Explicit waits


Implicit wait - if  you ask for an element and it`s not there, we`ll wait a little bit in case it`s about to arrive and we handed to you


projtis po IDEA - sprositj chto uze znajut i chto nado znatj!

Page Objects - dont auto generate page objects. Thinks about what they are for
They are for to:
1. Model services that  your pages or components of pages offer
2. Make your tests clearer and easier to maintain

Rule of thumb - don`t expose selenium api`s from it



* Я веду к тому, что "писать testable code" - это прямая обязанность инженера который думает о QA,
о качестве продукта - не важно программист он или автоматизатор. Фронтенд без адекватных атрибутов - это не тестебл код,
который в разы ухудшает эффективность автоматизации - которая и нужна то в первую очередь - именно для программистов -
что бы как можно быстрее давать им фидбек о том - что они там наменяли.


*rasskazatj pro KISS - keep it simple stupid - inoj raz luchshe napisatj prostoj iterator, chem


* rasskazatj pro Паттерны проектирования в автоматизации тестирования - https://habrahabr.ru/company/jugru/blog/338836/

* https://www.youtube.com/watch?v=iX7ptfdpJXY - tipizirovannye elementy
* Simplest fw - selenide - https://www.youtube.com/watch?v=Q7fqTLOr2YE, https://www.youtube.com/watch?v=Q7fqTLOr2YE - kiss - keep it simple stupid, goal is to not to overengineer
*NOTE - ne vsegda knopka javljaetjsa knopkoj v kontektset HTML
ne vsegda input forma javljaetsja formoj v HTML
* balanc mezdu dohodchivymi i abstrktnymi testami -> porog vhozdenija testirovshika (selenide)



* tell about different browsers:
** ff profile
** setting executable env variable
** options



notes from minsk:
* driver.getTitle
* driver.getCurrentUrl
* driver size

* add slides about how to write clean code http://www.garshol.priv.no/blog/105.html

* pokazatj primer s Milanovich incorrect approach

* how to prepare precondition via REST in Selenium - https://github.com/mwinteringham/api-webdriver-harmony/blob/master/src/test/java/BugPageTest.java



* https://github.com/Fulcrum81/SeleniumTraining

* File upload and download example - https://github.com/Fulcrum81/FileUploadDownload
 * File upload when using RemoteWebdriver (https://saucelabs.com/blog/selenium-tips-uploading-files-in-remote-webdriver )
* simple fw with page objects, but without page factory (BY as fields) - https://github.com/Fulcrum81/TestTemplate
* one driver per tests - https://github.com/Fulcrum81/WebDriverSingletonTemplate,https://github.com/Fulcrum81/WebDriverSingletonTemplate/blob/master/src/main/java/base/DriverContainer.java
* putting locators into separate file - https://github.com/Fulcrum81/WebDriverSingletonTemplate/blob/master/src/main/resources/locators.properties, https://github.com/Fulcrum81/WebDriverSingletonTemplate/blob/master/src/main/java/helpers/Locators.java
* working with Tables - https://github.com/Fulcrum81/WebTableExample/blob/master/src/test/java/TableTest.java
* Firefox profile: https://github.com/DevvratGotham/the-internet-swt/blob/master/src/io/github/devvratplus/theinternet/testcases/HandlingDownloads.java
		tempFolder = TestUtils.createTempDirectory();
		System.out.println("Using temperarory directory > " + tempFolder);

		firefoxProfile = (new ProfilesIni()).getProfile("seleniumuser");
		firefoxProfile.setPreference("browser.download.dir",
				tempFolder.getAbsolutePath());
		firefoxProfile.setPreference("browser.download.folderList", 2);
		firefoxProfile.setPreference("pdfjs.disabled", true);

sites to automate -
* http://todomvc.com/examples/angularjs/#


* add static


* already written selenium tests for the-internet https://github.com/DevvratGotham/the-internet-swt

* Clean code  - https://code.tutsplus.com/tutorials/top-15-best-practices-for-writing-super-readable-code--net-8118
https://dev.to/mohitrajput987/importance-of-writing-clean-code


*add explanation how DOM elements might appear in DOM:
        /*
        //NOTE - verify how dropdown options appear -
        // 1. they already might be in the DOM before clicking the dropdown.
                -> Then you may locate elements (driver.findElement()) in the top of the script
        // 2. they appear in the DOM only when clicking on the dropdown.
                -> Then you need to locate elements only after the dropdown click action
        */



        * Dont hardcode data which may change with time - e.g. testing envs, test users, explicit waits, etc
        	* parametrize it via external files - like config file for env URL or JSON for users data;
        * more general Fixtures Can Be Put to BaseTest class  and your Test class should extend the Base Test class.
        This way test class only has testing code without any preparation and teardown code
        * DriverFactory - Hide the logic of initializing an object inside the factory
        * Common methods, fields, initilization can be moved to parent Page class for all page objects



* Running tests from Maven:
        * setting env variables (e.g. setting browser via -Dbrowser) - surefire systemVariables
        * pom properties
        * surefire - generate reports in xml format
        * running in parallel - parallel, threadCount and forkCount


* Wrapping WebDriver into a WebDriverHelper class; (Bot Style Tests -https://github.com/SeleniumHQ/selenium/wiki/Bot-Style-Tests)
*Working with list of webelements - retrieving a list of text
 *
//
//        List<String> searchResultElementsTextList = new ArrayList<>();
//        for (WebElement element : searchResultElements){
//            new WebDriverWait(driver, 4).until(ExpectedConditions.visibilityOf(element.findElement(By.cssSelector(".r a"))));
//            String linkText = element.findElement(By.cssSelector(".r a")).getText();
//            searchResultElementsTextList.add(linkText);
//        }
//
//        assertTrue(searchResultElementsTextList.stream().allMatch(t -> t.toLowerCase().contains("cheese")));



* Being able to define the appropriate level around layers of abstraction is one of the key skills of automation engineers

* show how to handle passwords
* show DDT
    @Test
    public void testGoogleSearchCheese() throws Exception {
        GooglePage googlePage = new GooglePage(driver);
        googlePage.searchFor("cheese");
        GoogleSearchResultPage googleSearchResultPage = new GoogleSearchResultPage(driver);
        assertTrue(googleSearchResultPage.getFirstSearchResultElementText().toLowerCase().contains("cheese"));
    }

    @Test
    public void testGoogleSearchApple() throws Exception {
        GooglePage googlePage = new GooglePage(driver);
        googlePage.searchFor("apple");
        GoogleSearchResultPage googleSearchResultPage = new GoogleSearchResultPage(driver);
        assertTrue(googleSearchResultPage.getFirstSearchResultElementText().toLowerCase().contains("apple"));
    }

* DesiredCapabilities, Options:
            FirefoxOptions options = new FirefoxOptions()
                    .addPreference("browser.startup.page", 1)
                    .addPreference("browser.startup.homepage", "https://www.google.co.uk");

   ChromeOptions options = new ChromeOptions()
   options.addExtensions(new File("/path/to/extension.crx"))
   options.setBinary(new File("/path/to/chrome"));

   // For use with ChromeDriver:
   ChromeDriver driver = new ChromeDriver(options);

   // For use with RemoteWebDriver:
   RemoteWebDriver driver = new RemoteWebDriver(
       new URL("http://localhost:4444/wd/hub"),
       new ChromeOptions());

* Navigation: History and Location
* Cookies https://github.com/SeleniumHQ/selenium/wiki/Next-Steps
* Capabilities (https://sites.google.com/a/chromium.org/chromedriver/capabilities)
 Capabilities & ChromeOptions
 Capabilities are options that you can use to customize and configure a ChromeDriver session. This page documents all ChromeDriver supported capabilities and how to use them.

 There are two ways to specify capabilities.
 The first is to use the ChromeOptions class.
 If your client library does not have a ChromeOptions class (like the selenium ruby client), you can specify the capabilities directly as part of the DesiredCapabilities.


 * Guidelines and Recommendations
 https://seleniumhq.github.io/docs/guidelines.html

